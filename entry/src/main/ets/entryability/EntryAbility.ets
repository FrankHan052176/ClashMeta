import { AbilityConstant, UIAbility, Want } from '@kit.AbilityKit';
import { hilog } from '@kit.PerformanceAnalysisKit';
import { window } from '@kit.ArkUI';
import profileViewModel from '../entryability/ProfileViewModel';
import { vpnExtension } from '@kit.NetworkKit';
import { SocketStubService} from 'proxy_core'
import { Dns, OverrideSlot, Sniffer } from './ClashViewModel';

export default class EntryAbility extends UIAbility {
  onCreate(want: Want, launchParam: AbilityConstant.LaunchParam): void {
    hilog.info(0x0000, 'testTag', '%{public}s', 'Ability onCreate');
    this.init()
    let dd = new SocketStubService()
    dd.startService(this.context)
  }
  async  init(){
    await profileViewModel.init(this.context)
    try {
      await vpnExtension.startVpnExtensionAbility({
        deviceId: "",
        bundleName: "com.xiaobai.clash",
        abilityName: "ClashVpnAbility",
      });
    } catch (e) {
      console.error("init vpn service", e.message | e)
      this.context.terminateSelf()
    }
  }


  onDestroy(): void {
    hilog.info(0x0000, 'testTag', '%{public}s', 'Ability onDestroy');
  }

  async  onWindowStageCreate(windowStage: window.WindowStage):  Promise<void> {
    // Main window is created, set main page for this ability
    hilog.info(0x0000, 'testTag', '%{public}s', 'Ability onWindowStageCreate');
    await profileViewModel.initGeoIp()
    windowStage.loadContent('pages/Index', (err) => {
      if (err.code) {
        hilog.error(0x0000, 'testTag', 'Failed to load the content. Cause: %{public}s', JSON.stringify(err) ?? '');
        return;
      }
      PersistentStorage.persistProp('lastGroupName', "");
      PersistentStorage.persistProp('compatibilityModel', true);
      PersistentStorage.persistProp('setLogObserver', false);
      PersistentStorage.persistProp('backgroundModel', false);
      hilog.info(0x0000, 'testTag', 'Succeeded in loading the content.');
    });
  }

  onWindowStageDestroy(): void {
    // Main window is destroyed, release UI related resources
    hilog.info(0x0000, 'testTag', '%{public}s', 'Ability onWindowStageDestroy');
  }

  onForeground(): void {
    // Ability has brought to foreground
    hilog.info(0x0000, 'testTag', '%{public}s', 'Ability onForeground');
  }

  onBackground(): void {
    // Ability has back to background
    hilog.info(0x0000, 'testTag', '%{public}s', 'Ability onBackground');
  }
};
